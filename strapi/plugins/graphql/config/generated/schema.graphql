"""A piece of Brightvoid art."""
type Artwork {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  visible: Boolean
  description: String
  seo: String
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  imagecollections(sort: String, limit: Int, start: Int, where: JSON): [Imagecollection]
}

type ArtworkAggregator {
  count: Int
}

type ArtworkConnection {
  values: [Artwork]
  groupBy: ArtworkGroupBy
  aggregate: ArtworkAggregator
}

type ArtworkConnection_id {
  key: ID
  connection: ArtworkConnection
}

type ArtworkConnectionCreatedAt {
  key: DateTime
  connection: ArtworkConnection
}

type ArtworkConnectionDescription {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionName {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionSeo {
  key: String
  connection: ArtworkConnection
}

type ArtworkConnectionUpdatedAt {
  key: DateTime
  connection: ArtworkConnection
}

type ArtworkConnectionVisible {
  key: Boolean
  connection: ArtworkConnection
}

type ArtworkGroupBy {
  _id: [ArtworkConnection_id]
  createdAt: [ArtworkConnectionCreatedAt]
  updatedAt: [ArtworkConnectionUpdatedAt]
  name: [ArtworkConnectionName]
  visible: [ArtworkConnectionVisible]
  description: [ArtworkConnectionDescription]
  seo: [ArtworkConnectionSeo]
}

input ArtworkInput {
  name: String
  images: [ID]
  visible: Boolean
  description: String
  products: [ID]
  seo: String
  imagecollections: [ID]
}

"""Core constituents styled by artwork"""
type Barebone {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  productid: Int
  initobj: JSON
  price: Float
  product: Product
  variants(sort: String, limit: Int, start: Int, where: JSON): [Variants]
}

type BareboneAggregator {
  count: Int
  sum: BareboneAggregatorSum
  avg: BareboneAggregatorAvg
  min: BareboneAggregatorMin
  max: BareboneAggregatorMax
}

type BareboneAggregatorAvg {
  productid: Float
  price: Float
}

type BareboneAggregatorMax {
  productid: Float
  price: Float
}

type BareboneAggregatorMin {
  productid: Float
  price: Float
}

type BareboneAggregatorSum {
  productid: Float
  price: Float
}

type BareboneConnection {
  values: [Barebone]
  groupBy: BareboneGroupBy
  aggregate: BareboneAggregator
}

type BareboneConnection_id {
  key: ID
  connection: BareboneConnection
}

type BareboneConnectionCreatedAt {
  key: DateTime
  connection: BareboneConnection
}

type BareboneConnectionInitobj {
  key: JSON
  connection: BareboneConnection
}

type BareboneConnectionName {
  key: String
  connection: BareboneConnection
}

type BareboneConnectionPrice {
  key: Float
  connection: BareboneConnection
}

type BareboneConnectionProduct {
  key: ID
  connection: BareboneConnection
}

type BareboneConnectionProductid {
  key: Int
  connection: BareboneConnection
}

type BareboneConnectionUpdatedAt {
  key: DateTime
  connection: BareboneConnection
}

type BareboneGroupBy {
  _id: [BareboneConnection_id]
  createdAt: [BareboneConnectionCreatedAt]
  updatedAt: [BareboneConnectionUpdatedAt]
  name: [BareboneConnectionName]
  productid: [BareboneConnectionProductid]
  initobj: [BareboneConnectionInitobj]
  price: [BareboneConnectionPrice]
  product: [BareboneConnectionProduct]
}

input BareboneInput {
  name: String
  productid: Int
  initobj: JSON
  price: Float
  variants: [ID]
  product: ID
}

"""A slide in a carousel or slideshow"""
type Carouselslide {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  link: String
  foregroundimage: UploadFile
  backgroundimage: UploadFile
  featured: Boolean
}

type CarouselslideAggregator {
  count: Int
}

type CarouselslideConnection {
  values: [Carouselslide]
  groupBy: CarouselslideGroupBy
  aggregate: CarouselslideAggregator
}

type CarouselslideConnection_id {
  key: ID
  connection: CarouselslideConnection
}

type CarouselslideConnectionBackgroundimage {
  key: ID
  connection: CarouselslideConnection
}

type CarouselslideConnectionCreatedAt {
  key: DateTime
  connection: CarouselslideConnection
}

type CarouselslideConnectionFeatured {
  key: Boolean
  connection: CarouselslideConnection
}

type CarouselslideConnectionForegroundimage {
  key: ID
  connection: CarouselslideConnection
}

type CarouselslideConnectionLink {
  key: String
  connection: CarouselslideConnection
}

type CarouselslideConnectionTitle {
  key: String
  connection: CarouselslideConnection
}

type CarouselslideConnectionUpdatedAt {
  key: DateTime
  connection: CarouselslideConnection
}

type CarouselslideGroupBy {
  _id: [CarouselslideConnection_id]
  createdAt: [CarouselslideConnectionCreatedAt]
  updatedAt: [CarouselslideConnectionUpdatedAt]
  title: [CarouselslideConnectionTitle]
  link: [CarouselslideConnectionLink]
  foregroundimage: [CarouselslideConnectionForegroundimage]
  backgroundimage: [CarouselslideConnectionBackgroundimage]
  featured: [CarouselslideConnectionFeatured]
}

input CarouselslideInput {
  title: String
  link: String
  foregroundimage: ID
  backgroundimage: ID
  featured: Boolean
}

input createArtworkInput {
  data: ArtworkInput
}

type createArtworkPayload {
  artwork: Artwork
}

input createBareboneInput {
  data: BareboneInput
}

type createBarebonePayload {
  barebone: Barebone
}

input createCarouselslideInput {
  data: CarouselslideInput
}

type createCarouselslidePayload {
  carouselslide: Carouselslide
}

input createImagecollectionInput {
  data: ImagecollectionInput
}

type createImagecollectionPayload {
  imagecollection: Imagecollection
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVariantsInput {
  data: VariantsInput
}

type createVariantsPayload {
  variant: Variants
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArtworkInput {
  where: InputID
}

type deleteArtworkPayload {
  artwork: Artwork
}

input deleteBareboneInput {
  where: InputID
}

type deleteBarebonePayload {
  barebone: Barebone
}

input deleteCarouselslideInput {
  where: InputID
}

type deleteCarouselslidePayload {
  carouselslide: Carouselslide
}

input deleteImagecollectionInput {
  where: InputID
}

type deleteImagecollectionPayload {
  imagecollection: Imagecollection
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVariantsInput {
  where: InputID
}

type deleteVariantsPayload {
  variant: Variants
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Imagecollection {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  product: Product
  artwork: Artwork
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ImagecollectionAggregator {
  count: Int
}

type ImagecollectionConnection {
  values: [Imagecollection]
  groupBy: ImagecollectionGroupBy
  aggregate: ImagecollectionAggregator
}

type ImagecollectionConnection_id {
  key: ID
  connection: ImagecollectionConnection
}

type ImagecollectionConnectionArtwork {
  key: ID
  connection: ImagecollectionConnection
}

type ImagecollectionConnectionCreatedAt {
  key: DateTime
  connection: ImagecollectionConnection
}

type ImagecollectionConnectionName {
  key: String
  connection: ImagecollectionConnection
}

type ImagecollectionConnectionProduct {
  key: ID
  connection: ImagecollectionConnection
}

type ImagecollectionConnectionUpdatedAt {
  key: DateTime
  connection: ImagecollectionConnection
}

type ImagecollectionGroupBy {
  _id: [ImagecollectionConnection_id]
  createdAt: [ImagecollectionConnectionCreatedAt]
  updatedAt: [ImagecollectionConnectionUpdatedAt]
  name: [ImagecollectionConnectionName]
  product: [ImagecollectionConnectionProduct]
  artwork: [ImagecollectionConnectionArtwork]
}

input ImagecollectionInput {
  name: String
  product: ID
  artwork: ID
  images: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Artwork | createArtworkPayload | updateArtworkPayload | deleteArtworkPayload | ArtworkConnection | ArtworkAggregator | ArtworkGroupBy | ArtworkConnection_id | ArtworkConnectionCreatedAt | ArtworkConnectionUpdatedAt | ArtworkConnectionName | ArtworkConnectionVisible | ArtworkConnectionDescription | ArtworkConnectionSeo | Barebone | createBarebonePayload | updateBarebonePayload | deleteBarebonePayload | BareboneConnection | BareboneAggregator | BareboneAggregatorSum | BareboneAggregatorAvg | BareboneAggregatorMin | BareboneAggregatorMax | BareboneGroupBy | BareboneConnection_id | BareboneConnectionCreatedAt | BareboneConnectionUpdatedAt | BareboneConnectionName | BareboneConnectionProductid | BareboneConnectionInitobj | BareboneConnectionPrice | BareboneConnectionProduct | Carouselslide | createCarouselslidePayload | updateCarouselslidePayload | deleteCarouselslidePayload | CarouselslideConnection | CarouselslideAggregator | CarouselslideGroupBy | CarouselslideConnection_id | CarouselslideConnectionCreatedAt | CarouselslideConnectionUpdatedAt | CarouselslideConnectionTitle | CarouselslideConnectionLink | CarouselslideConnectionForegroundimage | CarouselslideConnectionBackgroundimage | CarouselslideConnectionFeatured | Imagecollection | createImagecollectionPayload | updateImagecollectionPayload | deleteImagecollectionPayload | ImagecollectionConnection | ImagecollectionAggregator | ImagecollectionGroupBy | ImagecollectionConnection_id | ImagecollectionConnectionCreatedAt | ImagecollectionConnectionUpdatedAt | ImagecollectionConnectionName | ImagecollectionConnectionProduct | ImagecollectionConnectionArtwork | Product | createProductPayload | updateProductPayload | deleteProductPayload | ProductConnection | ProductAggregator | ProductAggregatorSum | ProductAggregatorAvg | ProductAggregatorMin | ProductAggregatorMax | ProductGroupBy | ProductConnection_id | ProductConnectionCreatedAt | ProductConnectionUpdatedAt | ProductConnectionName | ProductConnectionSeo | ProductConnectionPrice | ProductConnectionDescription | ProductConnectionBarebone | Variants | createVariantsPayload | updateVariantsPayload | deleteVariantsPayload | VariantsConnection | VariantsAggregator | VariantsAggregatorSum | VariantsAggregatorAvg | VariantsAggregatorMin | VariantsAggregatorMax | VariantsGroupBy | VariantsConnection_id | VariantsConnectionCreatedAt | VariantsConnectionUpdatedAt | VariantsConnectionVariantid | VariantsConnectionName | VariantsConnectionAvailable | VariantsConnectionBarebone | VariantsConnectionColour | VariantsConnectionSize | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createArtwork(input: createArtworkInput): createArtworkPayload
  updateArtwork(input: updateArtworkInput): updateArtworkPayload
  deleteArtwork(input: deleteArtworkInput): deleteArtworkPayload
  createBarebone(input: createBareboneInput): createBarebonePayload
  updateBarebone(input: updateBareboneInput): updateBarebonePayload
  deleteBarebone(input: deleteBareboneInput): deleteBarebonePayload
  createCarouselslide(input: createCarouselslideInput): createCarouselslidePayload
  updateCarouselslide(input: updateCarouselslideInput): updateCarouselslidePayload
  deleteCarouselslide(input: deleteCarouselslideInput): deleteCarouselslidePayload
  createImagecollection(input: createImagecollectionInput): createImagecollectionPayload
  updateImagecollection(input: updateImagecollectionInput): updateImagecollectionPayload
  deleteImagecollection(input: deleteImagecollectionInput): deleteImagecollectionPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createVariants(input: createVariantsInput): createVariantsPayload
  updateVariants(input: updateVariantsInput): updateVariantsPayload
  deleteVariants(input: deleteVariantsInput): deleteVariantsPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""Content type for website products"""
type Product {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  seo: String
  price: Float
  description: String
  barebone: Barebone
  artwork(sort: String, limit: Int, start: Int, where: JSON): [Artwork]
  imagecollections(sort: String, limit: Int, start: Int, where: JSON): [Imagecollection]
}

type ProductAggregator {
  count: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorAvg {
  price: Float
}

type ProductAggregatorMax {
  price: Float
}

type ProductAggregatorMin {
  price: Float
}

type ProductAggregatorSum {
  price: Float
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductConnection_id {
  key: ID
  connection: ProductConnection
}

type ProductConnectionBarebone {
  key: ID
  connection: ProductConnection
}

type ProductConnectionCreatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionDescription {
  key: String
  connection: ProductConnection
}

type ProductConnectionName {
  key: String
  connection: ProductConnection
}

type ProductConnectionPrice {
  key: Float
  connection: ProductConnection
}

type ProductConnectionSeo {
  key: String
  connection: ProductConnection
}

type ProductConnectionUpdatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductGroupBy {
  _id: [ProductConnection_id]
  createdAt: [ProductConnectionCreatedAt]
  updatedAt: [ProductConnectionUpdatedAt]
  name: [ProductConnectionName]
  seo: [ProductConnectionSeo]
  price: [ProductConnectionPrice]
  description: [ProductConnectionDescription]
  barebone: [ProductConnectionBarebone]
}

input ProductInput {
  name: String
  seo: String
  price: Float
  description: String
  artwork: [ID]
  barebone: ID
  imagecollections: [ID]
}

type Query {
  artwork(id: ID!): Artwork
  artworks(sort: String, limit: Int, start: Int, where: JSON): [Artwork]
  artworksConnection(sort: String, limit: Int, start: Int, where: JSON): ArtworkConnection
  barebone(id: ID!): Barebone
  barebones(sort: String, limit: Int, start: Int, where: JSON): [Barebone]
  barebonesConnection(sort: String, limit: Int, start: Int, where: JSON): BareboneConnection
  carouselslide(id: ID!): Carouselslide
  carouselslides(sort: String, limit: Int, start: Int, where: JSON): [Carouselslide]
  carouselslidesConnection(sort: String, limit: Int, start: Int, where: JSON): CarouselslideConnection
  imagecollection(id: ID!): Imagecollection
  imagecollections(sort: String, limit: Int, start: Int, where: JSON): [Imagecollection]
  imagecollectionsConnection(sort: String, limit: Int, start: Int, where: JSON): ImagecollectionConnection
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  variant(id: ID!): Variants
  variants(sort: String, limit: Int, start: Int, where: JSON): [Variants]
  variantsConnection(sort: String, limit: Int, start: Int, where: JSON): VariantsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateArtworkInput {
  where: InputID
  data: ArtworkInput
}

type updateArtworkPayload {
  artwork: Artwork
}

input updateBareboneInput {
  where: InputID
  data: BareboneInput
}

type updateBarebonePayload {
  barebone: Barebone
}

input updateCarouselslideInput {
  where: InputID
  data: CarouselslideInput
}

type updateCarouselslidePayload {
  carouselslide: Carouselslide
}

input updateImagecollectionInput {
  where: InputID
  data: ImagecollectionInput
}

type updateImagecollectionPayload {
  imagecollection: Imagecollection
}

input updateProductInput {
  where: InputID
  data: ProductInput
}

type updateProductPayload {
  product: Product
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVariantsInput {
  where: InputID
  data: VariantsInput
}

type updateVariantsPayload {
  variant: Variants
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

"""Variants of barebones connected to supplier IDs"""
type Variants {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  variantid: Int
  name: String
  available: Boolean
  barebone: Barebone
  colour: String
  size: String
}

type VariantsAggregator {
  count: Int
  sum: VariantsAggregatorSum
  avg: VariantsAggregatorAvg
  min: VariantsAggregatorMin
  max: VariantsAggregatorMax
}

type VariantsAggregatorAvg {
  variantid: Float
}

type VariantsAggregatorMax {
  variantid: Float
}

type VariantsAggregatorMin {
  variantid: Float
}

type VariantsAggregatorSum {
  variantid: Float
}

type VariantsConnection {
  values: [Variants]
  groupBy: VariantsGroupBy
  aggregate: VariantsAggregator
}

type VariantsConnection_id {
  key: ID
  connection: VariantsConnection
}

type VariantsConnectionAvailable {
  key: Boolean
  connection: VariantsConnection
}

type VariantsConnectionBarebone {
  key: ID
  connection: VariantsConnection
}

type VariantsConnectionColour {
  key: String
  connection: VariantsConnection
}

type VariantsConnectionCreatedAt {
  key: DateTime
  connection: VariantsConnection
}

type VariantsConnectionName {
  key: String
  connection: VariantsConnection
}

type VariantsConnectionSize {
  key: String
  connection: VariantsConnection
}

type VariantsConnectionUpdatedAt {
  key: DateTime
  connection: VariantsConnection
}

type VariantsConnectionVariantid {
  key: Int
  connection: VariantsConnection
}

type VariantsGroupBy {
  _id: [VariantsConnection_id]
  createdAt: [VariantsConnectionCreatedAt]
  updatedAt: [VariantsConnectionUpdatedAt]
  variantid: [VariantsConnectionVariantid]
  name: [VariantsConnectionName]
  available: [VariantsConnectionAvailable]
  barebone: [VariantsConnectionBarebone]
  colour: [VariantsConnectionColour]
  size: [VariantsConnectionSize]
}

input VariantsInput {
  variantid: Int
  name: String
  available: Boolean
  barebone: ID
  colour: String
  size: String
}
